clear

%% (0) SET UP
%  ==========

% IMPORTANT: SET FILE PATH TO RESULTS CSVS
results_path = 'C:\Users\neo204\OneDrive - University of Exeter\NEVO\Defra ELM\ELM Options\Runs\2020-07-15 (Report Results Update Fix)\Non-Traded Central\';

mkdir([results_path, 'regions'])

% Set flag for server
% -------------------
% true - NEVO
% false - local machine (for testing)
server_flag = false;

% Connect to database
% -------------------
conn = fcn_connect_database(server_flag);

% Set up scheme names
% -------------------
% elm_schemes = {'fr_act', ...
%                'fr_act', ...
%                'fr_act', ...
%                'fr_env', ...
%                'fr_env', ...
%                'fr_env', ...
%                'fr_es', ...
%                'fr_es', ...
%                'fr_es', ...
%                'oc', ...
%                'oc', ...
%                'oc', ...
%                'fr_act_shared', ...
%                'fr_act_shared', ...
%                'fr_act_shared', ...
%                'oc_shared', ...
%                'oc_shared', ...
%                'oc_shared', ...
%                'fr_act_pct', ...
%                'fr_act_pct', ...
%                'fr_act_pct'};

elm_schemes = {'fr_act'; ...
               'fr_act'; ...
               'fr_act'};

% Set up budgets
% --------------
% elm_budgets = [1, ...
%                2, ...
%                3, ...
%                1, ...
%                2, ...
%                3, ...
%                1, ...
%                2, ...
%                3, ...
%                1, ...
%                2, ...
%                3, ...
%                1, ...
%                2, ...
%                3, ...
%                1, ...
%                2, ...
%                3, ...
%                1, ...
%                2, ...
%                3];

elm_budgets = [1; ...
               2; ...
               3];
           
num_files = length(elm_budgets);

% Read in 2km grid to region lookup table from database
% -----------------------------------------------------
sqlquery = 'SELECT new2kid, id AS region_id, proportion FROM regions_keys.key_grid_regions WHERE id NOT IN (''UKL'', ''UKM'', ''UKN'') ORDER BY new2kid';
setdbprefs('DataReturnFormat','table');
dataReturn = fetch(exec(conn,sqlquery));
lookup_2km_regions = dataReturn.Data;

% Get region ids and names
% ------------------------
sqlquery = 'SELECT nuts118cd AS region_id, nuts118nm AS region_name FROM regions.regions WHERE nuts118cd NOT IN (''UKL'', ''UKM'', ''UKN'') ORDER BY region_id';
setdbprefs('DataReturnFormat','table');
dataReturn = fetch(exec(conn,sqlquery));
region_ids = dataReturn.Data.region_id;
region_names = dataReturn.Data.region_name;
num_regions = length(region_ids);

% Set column names of results table to be aggregated
% --------------------------------------------------
cols_to_aggregate = {'option_hectares', ...
                     'payments', ...
                     'net_payment_to_farmer', ...
                     'benefits', ...
                     'benefit_ghg_farm', ...
                     'benefit_ghg_forestry', ...
                     'benefit_ghg_soil_forestry', ...
                     'benefit_rec', ...
                     'benefit_flooding', ...
                     'benefit_totn', ...
                     'benefit_totp', ...
                     'benefit_water_non_use', ...
                     'benefit_pollination', ...
                     'benefit_non_use_pollination', ...
                     'benefit_non_use_habitat', ...
                     'benefit_bio', ...
                     'cost_farm', ...
                     'cost_forestry', ...
                     'cost_rec', ...
                     'opp_costs', ...
                     'env_out_ghg', ...
                     'env_out_rec_grass_access', ...
                     'env_out_rec_wood_access', ...
                     'env_out_rec_grass_noaccess', ...
                     'env_out_rec_wood_no_access', ...
                     'env_out_flooding', ...
                     'env_out_totn', ...
                     'env_out_totp', ...
                     'env_out_pollination', ...
                     'env_out_bio', ...
                     'es_out_ghg', ...
                     'es_out_rec', ...
                     'es_out_flooding', ...
                     'es_out_totn', ...
                     'es_out_totp', ...
                     'es_out_water_non_use', ...
                     'es_out_pollination', ...
                     'es_out_non_use_pollination', ...
                     'es_out_non_use_habitat', ...
                     'es_out_bio'};

%% (1a) LOOP OVER ALL SCHEMES AND BUDGETS
%  =====================================
for i = 1:num_files
    % Read results .csv for this scheme and budget
    filename = [elm_schemes{i}, '_', num2str(elm_budgets(i)), '.csv'];
    results = readtable([results_path filename]);
    
    %% (1b) Loop over regions
    %  =====================
    results_region = array2table(nan(num_regions, length(cols_to_aggregate) + 2), 'VariableNames', [{'region_id', 'region_name'}, cols_to_aggregate]);
    results_region.region_id = region_ids;
    results_region.region_name = region_names;
    
    for j = 1:num_regions
        % Select rows from lookup table for this region
        region_j = region_ids{j};
        region_j_ind = strcmp(lookup_2km_regions.region_id, region_j);
        lookup_2km_region_j = lookup_2km_regions(region_j_ind, :);
        
        % Join results table to this table on new2kid
        results_2km_region_j = innerjoin(lookup_2km_region_j, results);
        
        % Aggregate results, accounting for proportion of 2km cell in
        % region j
        results_to_aggregate = table2array(results_2km_region_j(:, cols_to_aggregate));
        results_region_j = sum(results_2km_region_j.proportion .* results_to_aggregate);
        results_region_j = array2table(results_region_j, 'VariableNames', cols_to_aggregate);
        
        % Add aggregated results to full results region table
        results_region(j, 3:end) = results_region_j;
    end
    
%     % Add London to SE category
%     results_region = [results_region; array2table(nan(1, size(results_region, 2)), 'VariableNames', results_region.Properties.VariableNames)];
%     results_region(end, 1:2) = {'UKIJ', 'South East (Including London)'};
%     results_region(end, 3:end) = array2table(table2array(results_region(7, 3:end)) + table2array(results_region(8, 3:end)), 'VariableNames', cols_to_aggregate); 
%     
%     % Reorder to Defra table
%     results_region_ordered = results_region([10, 4, 2, 9, 6, 3, 5, 1], :);
    
    % Calculate benefit-cost ratio
    results_region.bcr = results_region.benefits ./ results_region.payments;
    results_region.bcr(isnan(results_region.bcr)) = 0;
    
    writetable(results_region, [results_path, 'regions/', filename])      

end




