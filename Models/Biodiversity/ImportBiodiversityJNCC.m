clear

database_calls_flag = false;
test_function_flag = true;

% Connect to the database
server_flag = false;
conn = fcn_connect_database(server_flag);

% Set paths for storing imported data
biodiversity_data_folder = 'C:\Data\Biodiversity\';

%% Import variables from database and save as .mat files
if database_calls_flag
    
    % Set file names for storing imported data
    NEVO_Biodiversity_data_mat = strcat(biodiversity_data_folder, 'NEVO_Biodiversity_data.mat');
    
    tic
    
    %% LOAD DATA FROM DATABASE
    %  =======================

    % a. Coefficients for the 100 species distribution models
    % -------------------------------------------------------
    sqlquery = ['SELECT beta_acanthis_cabaret, beta_acronicta_psi, ' ...
        'beta_alauda_arvensis, beta_allophyes_oxyacanthae, ' ...
        'beta_anaptychia_ciliaris_subsp_ciliaris, ' ...
        'beta_anchusa_arvensis, beta_andromeda_polifolia, ' ...
        'beta_anthus_trivialis, beta_arctostaphylos_alpinus, ' ...
        'beta_asplenium_viride, beta_atriplex_laciniata, ' ...
        'beta_barbastella_barbastellus, beta_blysmus_rufus, ' ...
        'beta_boloria_selene, beta_bombus_monticola, ' ...
        'beta_botaurus_stellaris, beta_cakile_maritima, ' ...
        'beta_campanula_glomerata, beta_caprimulgus_europaeus, ' ...
        'beta_carex_extensa, beta_carex_magellanica, ' ...
        'beta_centaurium_pulchellum, beta_cerastium_arvense, ' ...
        'beta_cercyon_convexiusculus, beta_cirsium_eriophorum, ' ...
        'beta_cochlodina_laminata, beta_coenonympha_pamphilus, ' ...
        'beta_coenonympha_tullia, beta_cossus_cossus, ' ...
        'beta_cupido_minimus, beta_daphne_laureola, ' ...
        'beta_dasypolia_templi, beta_emberiza_citrinella, ' ...
        'beta_emberiza_schoeniclus, beta_erebia_epiphron, ' ...
        'beta_eriophorum_latifolium, beta_erynnis_tages, ' ...
        'beta_felis_silvestris, beta_fumaria_muralis, ' ...
        'beta_genista_anglica, beta_genista_tinctoria, ' ...
        'beta_gnaphalium_supinum, beta_gnorimus_nobilis, ' ...
        'beta_goodyera_repens, beta_hipparchia_semele, ' ...
        'beta_hypericum_elodes, beta_lamium_hybridum, ' ...
        'beta_lasiommata_megera, beta_leptogium_brebissonii, ' ...
        'beta_leptophyes_punctatissima, beta_lepus_europaeus, ' ...
        'beta_lepus_timidus, beta_leymus_arenarius, ' ...
        'beta_limenitis_camilla, beta_liopterus_haemorrhoidalis, ' ...
        'beta_locustella_naevia, beta_lucanus_cervus, ' ...
        'beta_lullula_arborea, beta_lycopodium_clavatum, ' ...
        'beta_martes_martes, beta_metrioptera_brachyptera, ' ...
        'beta_micromys_minutus, beta_monacha_cantiana, ' ...
        'beta_motacilla_flava_subsp_flavissima, ' ...
        'beta_muscardinus_avellanarius, beta_muscicapa_striata, ' ...
        'beta_mustela_putorius, beta_myotis_bechsteinii, ' ...
        'beta_neottia_nidus_avis, beta_numenius_arquata, ' ...
        'beta_nyctalus_noctula, beta_ornithopus_perpusillus, ' ...
        'beta_orthilia_secunda, beta_oxyria_digyna, ' ...
        'beta_parmeliella_testacea, beta_perdix_perdix, ' ...
        'beta_phylloscopus_sibilatrix, beta_plecotus_auritus, ' ...
        'beta_pseudocyphellaria_intricata, beta_pyrola_media, ' ...
        'beta_radiola_linoides, beta_ranunculus_omiophyllus, ' ...
        'beta_rhinolophus_hipposideros, ' ...
        'beta_rhinolophus_ferrumequinum, beta_satyrium_w_album, ' ...
        'beta_saxifraga_tridactylites, beta_sciurus_vulgaris, ' ...
        'beta_silaum_silaus, beta_streptopelia_turtur, ' ...
        'beta_thymus_pulegioides, beta_tilia_cordata, ' ...
        'beta_trifolium_fragiferum, beta_trifolium_striatum, ' ...
        'beta_turdus_torquatus, beta_usnea_articulata, ' ...
        'beta_vaccinium_microcarpum, beta_vanellus_vanellus, ' ...
        'beta_vipera_berus, beta_xanthorhoe_decoloraria, ' ...
        'beta_zonitoides_excavatus ' ...
        'FROM nevo."betas_JNCC100_biodiversity"'];
    setdbprefs('DataReturnFormat','numeric');
    dataReturn  = fetch(exec(conn,sqlquery));
    Biodiversity.Coefficients = dataReturn.Data;
    
    % b. Grid cell data needed for the 100 models
    % -------------------------------------------
    sqlquery = ['SELECT new2kid, const, coast_ha, fwater_ha, ' ...
        'marine_ha, avElev_cell, aspect, pca_clay, pca_urb_lake, ' ...
        'pca_l_sand, pca_loam, pca_s_loam, pca_clay_loam, pca_sand, ' ...
        'pca_silt_loam, pca_ph1, pca_ph2, pca_ph3, pca_ph4, pca_sw1, ' ...
        'pca_sw2, pca_sw3, pca_sw4 ' ...
        'FROM nevo.nevo_variables ORDER BY new2kid'];
    setdbprefs('DataReturnFormat','table');
    dataReturn  = fetch(exec(conn,sqlquery));
    data_cells = dataReturn.Data;
    
    % Save 2km grid cell new2kid separately
    Biodiversity.new2kid = table2array(data_cells(:,1));
    
    % Rest goes into Biodiversity.Data_cells table
    Biodiversity.Data_cells = data_cells(:,2:end);
    
    % c. Grid cell climate data needed for the 100 models
    % ---------------------------------------------------
    sqlquery = ['SELECT rain_20, rain_30, rain_40, rain_50, ' ...
        'bio3_20, bio3_30, bio3_40, bio3_50, ' ...
        'bio7_20, bio7_30, bio7_40, bio7_50, ' ...
        'bio8_20, bio8_30, bio8_40, bio8_50, ' ...
        'bio9_20, bio9_30, bio9_40, bio9_50, ' ...
        'bio10_20, bio10_30, bio10_40, bio10_50, ' ...
        'bio11_20, bio11_30, bio11_40, bio11_50 ' ...
        'FROM nevo."JNCC_climate_avg" ORDER BY new2kid'];
    setdbprefs('DataReturnFormat','table');
    dataReturn  = fetch(exec(conn,sqlquery));
    Biodiversity.Climate_cells = dataReturn.Data;
    
    toc
    
    % Save data to .mat file
    save(NEVO_Biodiversity_data_mat, 'Biodiversity', '-mat', '-v6')
    
    % Clear variables
    clear data_cells dataReturn sqlquery
    
end

%% Test fcn_run_biodiversity function
if test_function_flag
    
    % Set up PV as table
    sqlquery = ['SELECT new2kid, wood_ha, urban_ha, sngrass_ha, ' ...
        'p_maize, p_hort, p_othcer ' ...
        'FROM nevo.nevo_variables ORDER BY new2kid'];
    setdbprefs('DataReturnFormat','table');
    dataReturn  = fetch(exec(conn,sqlquery));
    PV = dataReturn.Data;
    
    % Set up out as table
    sqlquery = ['SELECT new2kid, ' ...
        'wheat_ha_20, wheat_ha_30, wheat_ha_40, wheat_ha_50, ' ...
        'osr_ha_20, osr_ha_30, osr_ha_40, osr_ha_50, ' ...
        'wbar_ha_20, wbar_ha_30, wbar_ha_40, wbar_ha_50, ' ...
        'sbar_ha_20, sbar_ha_30, sbar_ha_40, sbar_ha_50, ' ...
        'pot_ha_20, pot_ha_30, pot_ha_40, pot_ha_50, ' ...
        'sb_ha_20, sb_ha_30, sb_ha_40, sb_ha_50, ' ...
        'other_ha_20, other_ha_30, other_ha_40, other_ha_50, ' ...
        'pgrass_ha_20, pgrass_ha_30, pgrass_ha_40, pgrass_ha_50, ' ...
        'tgrass_ha_20, tgrass_ha_30, tgrass_ha_40, tgrass_ha_50, ' ...
        'rgraz_ha_20, rgraz_ha_30, rgraz_ha_40, rgraz_ha_50 ' ...
        'FROM nevo_explore.explore_2km ORDER BY new2kid'];
    setdbprefs('DataReturnFormat','table');
    dataReturn  = fetch(exec(conn,sqlquery));
    out = dataReturn.Data;
    
    % Reduce PV structure to new2kid cells in out structure
    [input_cells_ind, input_cell_idx] = ismember(out.new2kid, PV.new2kid);
    input_cell_idx                    = input_cell_idx(input_cells_ind);    
    PV = PV(input_cell_idx,:);
    
    % Convert PV and out tables to structure
    PV = table2struct(PV,'ToScalar',true);
    out = table2struct(out,'ToScalar',true);
    
    % Run the main function
    es_biodiversity = fcn_run_biodiversity(biodiversity_data_folder, PV, out);
    
end
