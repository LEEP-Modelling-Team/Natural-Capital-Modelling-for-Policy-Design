% fourc_agg_to_farm_types.m
% =========================
% Take results from an ELM options run, i.e. those obtained by running
% three_run_farmer_uptake.m and stored in the /Runs/ folder, and aggregate
% them to the 10 Defra UK Farm Classifications.
clear

%% (1) Set up
%  ==========
% (a) Set path to the ELMs option results
% ---------------------------------------
% These should be stored as .csv files in the /Runs/ folder
results_path = 'C:\Users\neo204\OneDrive - University of Exeter\NEVO\Defra ELM\ELM Options\Runs\2020-07-15 (Report Results Update Fix)\Non-Traded Central\';

% (b) Create a directory to store aggregated results
% --------------------------------------------------
mkdir([results_path, 'farm_types'])

% Set up scheme names
% -------------------
% elm_schemes = {'fr_act', ...
%                'fr_act', ...
%                'fr_act', ...
%                'fr_env', ...
%                'fr_env', ...
%                'fr_env', ...
%                'fr_es', ...
%                'fr_es', ...
%                'fr_es', ...
%                'oc', ...
%                'oc', ...
%                'oc', ...
%                'fr_act_shared', ...
%                'fr_act_shared', ...
%                'fr_act_shared', ...
%                'oc_shared', ...
%                'oc_shared', ...
%                'oc_shared', ...
%                'fr_act_pct', ...
%                'fr_act_pct', ...
%                'fr_act_pct'};

elm_schemes = {'fr_act', ...
               'fr_act', ...
               'fr_act'};

% Set up budgets
% --------------
% elm_budgets = [1, ...
%                2, ...
%                3, ...
%                1, ...
%                2, ...
%                3, ...
%                1, ...
%                2, ...
%                3, ...
%                1, ...
%                2, ...
%                3, ...
%                1, ...
%                2, ...
%                3, ...
%                1, ...
%                2, ...
%                3, ...
%                1, ...
%                2, ...
%                3];

elm_budgets = [1, ...
               2, ...
               3];

num_files = length(elm_budgets);

% (d) Get Defra UK farm classifications
% -------------------------------------
% These are generated in the distributional_analysis.m script
path_to_classes = 'C:\Users\neo204\OneDrive - University of Exeter\NEVO\Defra ELM\Distributional Analysis\farm_classifications.csv';
farm_types = readtable(path_to_classes);
num_farm_types = 10;
categories = {'Cereals'; ...
              'General Cropping'; ...
              'Horticulture'; ...
              'Specialist Pigs'; ...
              'Specialist Poultry'; ...
              'Dairy'; ...
              'LFA Grazing Livestock'; ...
              'Lowland Grazing Livestock'; ...
              'Mixed'; ...
              'Other'};

% (e) Set column names of results table to be aggregated
% -------------------------------------------------------
cols_to_aggregate = {'option_hectares', ...
                     'payments', ...
                     'net_payment_to_farmer', ...
                     'benefits', ...
                     'benefit_ghg_farm', ...
                     'benefit_ghg_forestry', ...
                     'benefit_ghg_soil_forestry', ...
                     'benefit_rec', ...
                     'benefit_flooding', ...
                     'benefit_totn', ...
                     'benefit_totp', ...
                     'benefit_water_non_use', ...
                     'benefit_pollination', ...
                     'benefit_non_use_pollination', ...
                     'benefit_non_use_habitat', ...
                     'benefit_bio', ...
                     'cost_farm', ...
                     'cost_forestry', ...
                     'cost_rec', ...
                     'opp_costs', ...
                     'env_out_ghg', ...
                     'env_out_rec_grass_access', ...
                     'env_out_rec_wood_access', ...
                     'env_out_rec_grass_noaccess', ...
                     'env_out_rec_wood_no_access', ...
                     'env_out_flooding', ...
                     'env_out_totn', ...
                     'env_out_totp', ...
                     'env_out_pollination', ...
                     'env_out_bio', ...
                     'es_out_ghg', ...
                     'es_out_rec', ...
                     'es_out_flooding', ...
                     'es_out_totn', ...
                     'es_out_totp', ...
                     'es_out_water_non_use', ...
                     'es_out_pollination', ...
                     'es_out_non_use_pollination', ...
                     'es_out_non_use_habitat', ...
                     'es_out_bio'};

%% (2) Aggregate results to farm types
%  ===================================
% (a) Loop over files
% -------------------
for i = 1:num_files
    % Read results .csv for this scheme and budget
    filename = [elm_schemes{i}, '_', num2str(elm_budgets(i)), '.csv'];
    results = readtable([results_path, filename]);
    
    % Preallocate a table to store aggregated results for each file
    results_farm_type = array2table(nan(num_farm_types, length(cols_to_aggregate) + 2), 'VariableNames', [{'class_num', 'class_name'}, cols_to_aggregate]);
    results_farm_type.class_num = (1:num_farm_types)';
    results_farm_type.class_name = categories;
    
    % (b) Loop over farm types
    for j = 1:10
        % Select rows where 2km cells are of farm type j
        farm_type_j_ind = (farm_types.class_num == j);
        
        % Subset results for these cells
        results_2km_farm_type_j = results(farm_type_j_ind, :);
        
        % Aggregate (sum) results
        results_to_aggregate = table2array(results_2km_farm_type_j(:, cols_to_aggregate));
        results_farm_type_j = sum(results_to_aggregate);
        results_farm_type_j = array2table(results_farm_type_j, 'VariableNames', cols_to_aggregate);
        
        % Add aggregated results to full results region table
        results_farm_type(j, 3:end) = results_farm_type_j;
    end
    
    % Calculate benefit-cost ratio
    results_farm_type.bcr = results_farm_type.benefits ./ results_farm_type.payments;
    results_farm_type.bcr(isnan(results_farm_type.bcr)) = 0;
    
    % Write results for this scheme to .csv file
    writetable(results_farm_type, [results_path, 'farm_types\', filename]) 
end

