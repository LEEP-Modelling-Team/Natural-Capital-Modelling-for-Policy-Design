function prices = fcn_run_price_optimisation(payment_mechanism, ...
                                             budget, ...
                                             markup, ...
                                             elm_options, ...
                                             farmer_sample_ind, ...
                                             cell_ids, ...
                                             elm_ha, ...
                                             benefits, ...
                                             costs, ...
                                             env_outs, ...
                                             es_outs, ...
                                             unit_value_max, ...
                                             warm_start_prices)
    %% (1) Set up
    %  ==========
    % Number of ELM options
    num_elm_options = length(elm_options);
    
    % Number of 2km grid cells
    num_cells = length(cell_ids);

    % Construct matrices for selected elm_options in this year
    % --------------------------------------------------------
    % ELM hectares, opportunity cost benefits, benefit cost ratios
    % Farmers compare across these when deciding which ELM option to do
    % Important: use year 1 (base year) values to determine prices
    % When these prices are applied in subsequent years (i.e. in 
    % script4_run_farmer_uptake in fcn_run_payment_mechanisms) we discount 
    % them appropriately
    elm_ha_year              = nan(num_cells, num_elm_options);
    benefits_year            = nan(num_cells, num_elm_options);
    costs_year               = nan(num_cells, num_elm_options);

    for k = 1:num_elm_options
        elm_ha_year(:, k)   = elm_ha.(elm_options{k});
        benefits_year(:, k) = benefits.(elm_options{k})(:, 1);
        costs_year(:, k)    = costs.(elm_options{k})(:, 1);
        env_outs_year.(elm_options{k}) = env_outs.(elm_options{k})(:, :, 1);
        es_outs_year.(elm_options{k})  = es_outs.(elm_options{k})(:, :, 1);
    end
 
    % Use farmer_sample_ind to select farmers to include in price search
    % ------------------------------------------------------------------    
    % Extract relevant rows from above arrays/structures
    elm_ha_year = round(elm_ha_year(farmer_sample_ind, :), 8);
    benefits_year = round(benefits_year(farmer_sample_ind, :), 8);
    costs_year = round(costs_year(farmer_sample_ind, :), 8);
    for k = 1:num_elm_options
        env_outs_year.(elm_options{k}) = round(env_outs_year.(elm_options{k})(farmer_sample_ind, :), 8);
        es_outs_year.(elm_options{k}) = round(es_outs_year.(elm_options{k})(farmer_sample_ind, :), 8);
    end
    
    % Also extract cell ids for eligible farmers
    cell_ids_year = cell_ids(farmer_sample_ind);
    
    %% (2) Run payment mechanism
    %  =========================
    switch payment_mechanism
        case 'fr_act'
            % Flat rate for activity                                                                                           
            [~, ~, prices, ~, ~] = lp_fr_activity(elm_options, ...
                                                    budget, ...
                                                    markup, ...
                                                    costs_year, ...
                                                    benefits_year, ...
                                                    elm_ha_year, ...
                                                    cell_ids_year, ...
                                                    payment_mechanism);
        case 'fr_env'
            % Flat rate for environmental outcomes
            % env_outs = GHG, rec grass access, rec wood access, rec grass no access, rec wood no access, flood, tot n, tot p, pollinator species, biodiversity        
            [~,prices, ~] = lp_fr_env(elm_options, ...
                                              budget, ...
                                              markup, ...
                                              costs_year, ...
                                              benefits_year, ...
                                              env_outs_year, ...
                                              payment_mechanism, ...
                                              unit_value_max, ...
                                              warm_start_prices);
       case 'fr_es'
            % Flat rate for ecosystem services
            % es_outs =  GHG val, rec val, flood val, totn val, totp val, water non-use val, pollination val, non use pollination val, non use habitat, biodiversity val
            [~, ~, prices] = lp_fr_env(elm_options, ...
                                                  budget, ...
                                                  markup, ...
                                                  costs_year, ...
                                                  benefits_year, ...
                                                  es_outs_year, ...
                                                  cell_ids_year, ...
                                                  payment_mechanism, ...
                                                  unit_value_max);
        otherwise
            error('''payment_mechanism'' not of type ''flat rate'' or does not exist.')
    end
end