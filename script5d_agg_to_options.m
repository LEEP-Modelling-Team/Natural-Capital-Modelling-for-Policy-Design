% fourd_agg_to_options.m
% ======================
% Take results from an ELM options run, i.e. those obtained by running
% three_run_farmer_uptake.m and stored in the /Runs/ folder, and aggregate
% them to the 16 ELM options.
clear

%% (1) Set up
%  ==========
% (a) Set path to the ELMs option results
% ---------------------------------------
% These should be stored as .csv files in the /Runs/ folder
results_path = 'C:\Users\neo204\OneDrive - University of Exeter\NEVO\Defra ELM\ELM Options\Runs\2020-07-15 (Report Results Update Fix)\Non-Traded Central\';

% (b) Create a directory to store aggregated results
% --------------------------------------------------
mkdir([results_path, 'options'])

% Set up scheme names
% -------------------
% elm_schemes = {'fr_act', ...
%                'fr_act', ...
%                'fr_act', ...
%                'fr_env', ...
%                'fr_env', ...
%                'fr_env', ...
%                'fr_es', ...
%                'fr_es', ...
%                'fr_es', ...
%                'oc', ...
%                'oc', ...
%                'oc', ...
%                'fr_act_shared', ...
%                'fr_act_shared', ...
%                'fr_act_shared', ...
%                'oc_shared', ...
%                'oc_shared', ...
%                'oc_shared', ...
%                'fr_act_pct', ...
%                'fr_act_pct', ...
%                'fr_act_pct'};

elm_schemes = {'fr_act', ...
               'fr_act', ...
               'fr_act'};

% Set up budgets
% --------------
% elm_budgets = [1, ...
%                2, ...
%                3, ...
%                1, ...
%                2, ...
%                3, ...
%                1, ...
%                2, ...
%                3, ...
%                1, ...
%                2, ...
%                3, ...
%                1, ...
%                2, ...
%                3, ...
%                1, ...
%                2, ...
%                3, ...
%                1, ...
%                2, ...
%                3];

elm_budgets = [1; ...
               2; ...
               3];

num_files = length(elm_budgets);

% (d) Specify ELM option names
% ----------------------------
elm_option_names = {'arable_reversion_sng_access', ...
                    'destocking_sng_access', ...
                    'arable_reversion_wood_access', ...
                    'destocking_wood_access', ...
                    'arable_reversion_sng_noaccess', ...
                    'destocking_sng_noaccess', ...
                    'arable_reversion_wood_noaccess', ...
                    'destocking_wood_noaccess', ...
                    'ar_sng_d_sng', ...
                    'ar_sng_d_w', ...
                    'ar_w_d_sng', ...
                    'ar_w_d_w', ...
                    'ar_sng_d_sng_na', ...
                    'ar_sng_d_w_na', ...
                    'ar_w_d_sng_na', ...
                    'ar_w_d_w_na'};
                
num_elm_options = length(elm_option_names);

% (d) Set column names of results table to be aggregated
% -------------------------------------------------------
cols_to_aggregate = {'option_hectares', ...
                     'payments', ...
                     'net_payment_to_farmer', ...
                     'benefits', ...
                     'benefit_ghg_farm', ...
                     'benefit_ghg_forestry', ...
                     'benefit_ghg_soil_forestry', ...
                     'benefit_rec', ...
                     'benefit_flooding', ...
                     'benefit_totn', ...
                     'benefit_totp', ...
                     'benefit_water_non_use', ...
                     'benefit_pollination', ...
                     'benefit_non_use_pollination', ...
                     'benefit_non_use_habitat', ...
                     'benefit_bio', ...
                     'cost_farm', ...
                     'cost_forestry', ...
                     'cost_rec', ...
                     'opp_costs', ...
                     'env_out_ghg', ...
                     'env_out_rec_grass_access', ...
                     'env_out_rec_wood_access', ...
                     'env_out_rec_grass_noaccess', ...
                     'env_out_rec_wood_no_access', ...
                     'env_out_flooding', ...
                     'env_out_totn', ...
                     'env_out_totp', ...
                     'env_out_pollination', ...
                     'env_out_bio', ...
                     'es_out_ghg', ...
                     'es_out_rec', ...
                     'es_out_flooding', ...
                     'es_out_totn', ...
                     'es_out_totp', ...
                     'es_out_water_non_use', ...
                     'es_out_pollination', ...
                     'es_out_non_use_pollination', ...
                     'es_out_non_use_habitat', ...
                     'es_out_bio'};
                         
%% (2) Aggregate results to options
%  ================================
% (a) Loop over files
% -------------------
for i = 1:num_files
    % Read results .csv for this scheme and budget
    filename = [elm_schemes{i}, '_', num2str(elm_budgets(i)), '.csv'];
    results = readtable([results_path, filename]);
    
    % Preallocate a table to store aggregated results for each file
    results_options = array2table(nan(num_elm_options, length(cols_to_aggregate) + 2), 'VariableNames', [{'option_num', 'option_name'}, cols_to_aggregate]);
    results_options.option_num = (1:num_elm_options)';
    results_options.option_name = elm_option_names';
    
    % (b) Loop over options
    for j = 1:num_elm_options
        % Select rows where 2km cells take option j
        option_j_ind = (results.option_choice == j);
        
        % Subset results for these cells
        results_2km_option_j = results(option_j_ind, :);
        
        % Aggregate (sum) results
        results_to_aggregate = table2array(results_2km_option_j(:, cols_to_aggregate));
        results_option_j = sum(results_to_aggregate, 1);
        results_option_j = array2table(results_option_j, 'VariableNames', cols_to_aggregate);
        
        % Add aggregated results to full results option table
        results_options(j, 3:end) = results_option_j;
    end
    
    % Calculate benefit-cost ratio
    results_options.bcr = results_options.benefits ./ results_options.payments;
    results_options.bcr(isnan(results_options.bcr)) = 0;
    
    % Write results for this scheme to .csv file
    writetable(results_options, [results_path, 'options\', filename]) 
end
